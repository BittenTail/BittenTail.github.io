{"meta":{"title":"BittenTail","subtitle":null,"description":null,"author":"BittenTail","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-09-04T08:26:11.000Z","updated":"2019-09-04T08:31:22.337Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-09-06T01:42:40.000Z","updated":"2019-09-06T01:44:32.239Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-04T08:24:15.000Z","updated":"2019-09-04T08:31:36.919Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis初学","slug":"Redis初学","date":"2019-10-22T02:22:10.000Z","updated":"2019-10-22T03:02:14.544Z","comments":true,"path":"2019/10/22/Redis初学/","link":"","permalink":"http://yoursite.com/2019/10/22/Redis初学/","excerpt":"简介：Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式。","text":"简介：Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式。 Redis数据类型：redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）以及zset（sorted set：有序集合）。 1.String（字符串） String类型是二进制安全的。即Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。 string类型的值最大能存储512MB。2.Hash（哈希） Redis hash是一个键值（key=&gt;value）对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 每个hash可以存储26 PS： Redis配置文件：位于Redis安装目录下，文件名为rredis.conf（windows名为redis.windows.conf）。可以通过CONFIG命令查看或设置配置项。 守护进程（Daemon Process），即Daemon进程（精灵进程），是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在Linux中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依赖于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。·","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"数据库","slug":"学习笔记/数据库","permalink":"http://yoursite.com/categories/学习笔记/数据库/"},{"name":"Redis","slug":"学习笔记/数据库/Redis","permalink":"http://yoursite.com/categories/学习笔记/数据库/Redis/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"}]},{"title":"归并排序","slug":"归并排序","date":"2019-09-07T11:48:38.000Z","updated":"2019-09-07T11:59:09.718Z","comments":true,"path":"2019/09/07/归并排序/","link":"","permalink":"http://yoursite.com/2019/09/07/归并排序/","excerpt":"介绍：","text":"介绍： 描述：算法图解： 代码实现：12","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"算法","slug":"学习笔记/算法","permalink":"http://yoursite.com/categories/学习笔记/算法/"},{"name":"排序算法","slug":"学习笔记/算法/排序算法","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/"},{"name":"归并排序","slug":"学习笔记/算法/排序算法/归并排序","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/归并排序/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"《算法导论》","slug":"《算法导论》","permalink":"http://yoursite.com/tags/《算法导论》/"}]},{"title":"插入排序","slug":"插入排序","date":"2019-09-06T14:05:55.000Z","updated":"2019-09-07T11:59:01.341Z","comments":true,"path":"2019/09/06/插入排序/","link":"","permalink":"http://yoursite.com/2019/09/06/插入排序/","excerpt":"介绍：插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。","text":"介绍：插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。 描述：插入算法的工作方式如同人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入到左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，并进行插入。拿在手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。 算法图解： 代码实现：12345678910111213public int [] insertSort(int [] nums) &#123; int key=0,j; for(int i=1;i&lt;nums.length;i++) &#123; key = nums[i]; j = i-1; while(j &gt;= 0 &amp;&amp; nums[j] &gt; key) &#123;//当j到达第一个数时，或者插入值找到位置时退出循环 nums[j+1] = nums[j]; j = j-1; &#125; nums[j+1] = key; &#125; return nums; &#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"算法","slug":"学习笔记/算法","permalink":"http://yoursite.com/categories/学习笔记/算法/"},{"name":"排序算法","slug":"学习笔记/算法/排序算法","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/"},{"name":"插入排序","slug":"学习笔记/算法/排序算法/插入排序","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/插入排序/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"《算法导论》","slug":"《算法导论》","permalink":"http://yoursite.com/tags/《算法导论》/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-09-06T01:05:53.000Z","updated":"2019-09-06T01:47:22.096Z","comments":true,"path":"2019/09/06/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2019/09/06/我的第一篇博客/","excerpt":"","text":"","categories":[],"tags":[{"name":"My","slug":"My","permalink":"http://yoursite.com/tags/My/"}]}]}