{"meta":{"title":"BittenTail","subtitle":null,"description":null,"author":"BittenTail","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-09-04T08:26:11.000Z","updated":"2019-09-04T08:31:22.337Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-04T08:24:15.000Z","updated":"2019-09-04T08:31:36.919Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-09-06T01:42:40.000Z","updated":"2019-09-06T01:44:32.239Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux-链接","slug":"Linux-链接","date":"2019-10-24T03:05:59.000Z","updated":"2019-10-24T05:22:13.489Z","comments":true,"path":"2019/10/24/Linux-链接/","link":"","permalink":"http://yoursite.com/2019/10/24/Linux-链接/","excerpt":"Linux链接在Linux中链接分为两种，一种为硬链接（Hard Link），另外一种为软链接（Symbolic Link）或称为符号链接。默认情况下，ln命令产生硬链接。","text":"Linux链接在Linux中链接分为两种，一种为硬链接（Hard Link），另外一种为软链接（Symbolic Link）或称为符号链接。默认情况下，ln命令产生硬链接。 硬链接：硬链接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号（Inode Index），它存储着文件重要参数信息，也就是元数据（metadata），比如创建时间、修改时间、文件大小、属主、归属的用户组（属组）、读写权数据所在block号等。在Linux中，多个文件名指向同一索引节点是存在的。比如：A是B的硬链接（A和B均为文件名），则A的目录项中的inode节点号与B的目录项中的inode节点号相同，即一个inode节点对应两个不同的文件名，两个文件名指向同一个文件，A和B对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个。硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个链接并不影响索引节点本身和其他的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。 软链接：软链接（符号链接），类似于windows系统中的快捷方式。它实际上是一种特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A是B的软链接（A和B都是文件名），A的目录项中的inode节点号与B的目录项中的inode节点号不相同，A和B指向的是两个不同的inode，继而指向两块不同的数据块。但是A的数据块中存放的只是B的路径名（可以根据这个找到B的目录项）。A和B之间是“主从”关系，如果B被删除了，A任然存在（因为两个是不同的文件），但指向的是一个无效的链接。 两者的特点软链接： 1.软链接是存放另一个文件的路径的形式存在。 2.软链接可以跨文件系统，硬链接不行。 3.软链接可以对一个不存在的文件名进行链接，硬链接必须要有源文件。 4.软链接可以对目录进行链接。 硬链接： 1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接。 3.硬链接只有在同一个文件系统中才能创建。 4.删除一个硬链接文件并不影响其他有相同inode号的文件。 不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁盘空间。 Linux系统可以用ln命令来创建链接文件。 ln命令格式：ln [参数] [源文件或目录] [目标文件或目录] 主要参数： -i交互模式，文件存在则提示用户是否覆盖。 -s软链接（符号链接） -d允许超级用户制作目录的硬链接 -b删除，覆盖以前建立的链接 软链接（符号链接）：ln -s source target 硬链接（实体链接）：ln source target songguojun:https://www.cnblogs.com/songgj/p/9115954.html PS：","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"Linux","slug":"学习笔记/Linux","permalink":"http://yoursite.com/categories/学习笔记/Linux/"},{"name":"知识点","slug":"学习笔记/Linux/知识点","permalink":"http://yoursite.com/categories/学习笔记/Linux/知识点/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"知识点","slug":"知识点","permalink":"http://yoursite.com/tags/知识点/"}]},{"title":"Redis初学","slug":"Redis初学","date":"2019-10-22T02:22:10.000Z","updated":"2019-10-22T03:02:14.544Z","comments":true,"path":"2019/10/22/Redis初学/","link":"","permalink":"http://yoursite.com/2019/10/22/Redis初学/","excerpt":"简介：Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式。","text":"简介：Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式。 Redis数据类型：redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）以及zset（sorted set：有序集合）。 1.String（字符串） String类型是二进制安全的。即Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。 string类型的值最大能存储512MB。2.Hash（哈希） Redis hash是一个键值（key=&gt;value）对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 每个hash可以存储26 PS： Redis配置文件：位于Redis安装目录下，文件名为rredis.conf（windows名为redis.windows.conf）。可以通过CONFIG命令查看或设置配置项。 守护进程（Daemon Process），即Daemon进程（精灵进程），是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在Linux中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依赖于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。·","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"数据库","slug":"学习笔记/数据库","permalink":"http://yoursite.com/categories/学习笔记/数据库/"},{"name":"Redis","slug":"学习笔记/数据库/Redis","permalink":"http://yoursite.com/categories/学习笔记/数据库/Redis/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"}]},{"title":"归并排序","slug":"归并排序","date":"2019-09-07T11:48:38.000Z","updated":"2019-09-07T11:59:09.718Z","comments":true,"path":"2019/09/07/归并排序/","link":"","permalink":"http://yoursite.com/2019/09/07/归并排序/","excerpt":"介绍：","text":"介绍： 描述：算法图解： 代码实现：12","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"算法","slug":"学习笔记/算法","permalink":"http://yoursite.com/categories/学习笔记/算法/"},{"name":"排序算法","slug":"学习笔记/算法/排序算法","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/"},{"name":"归并排序","slug":"学习笔记/算法/排序算法/归并排序","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/归并排序/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"《算法导论》","slug":"《算法导论》","permalink":"http://yoursite.com/tags/《算法导论》/"}]},{"title":"插入排序","slug":"插入排序","date":"2019-09-06T14:05:55.000Z","updated":"2019-09-07T11:59:01.341Z","comments":true,"path":"2019/09/06/插入排序/","link":"","permalink":"http://yoursite.com/2019/09/06/插入排序/","excerpt":"介绍：插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。","text":"介绍：插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。 描述：插入算法的工作方式如同人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入到左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，并进行插入。拿在手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。 算法图解： 代码实现：12345678910111213public int [] insertSort(int [] nums) &#123; int key=0,j; for(int i=1;i&lt;nums.length;i++) &#123; key = nums[i]; j = i-1; while(j &gt;= 0 &amp;&amp; nums[j] &gt; key) &#123;//当j到达第一个数时，或者插入值找到位置时退出循环 nums[j+1] = nums[j]; j = j-1; &#125; nums[j+1] = key; &#125; return nums; &#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"},{"name":"算法","slug":"学习笔记/算法","permalink":"http://yoursite.com/categories/学习笔记/算法/"},{"name":"排序算法","slug":"学习笔记/算法/排序算法","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/"},{"name":"插入排序","slug":"学习笔记/算法/排序算法/插入排序","permalink":"http://yoursite.com/categories/学习笔记/算法/排序算法/插入排序/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"《算法导论》","slug":"《算法导论》","permalink":"http://yoursite.com/tags/《算法导论》/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-09-06T01:05:53.000Z","updated":"2019-09-06T01:47:22.096Z","comments":true,"path":"2019/09/06/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2019/09/06/我的第一篇博客/","excerpt":"","text":"","categories":[],"tags":[{"name":"My","slug":"My","permalink":"http://yoursite.com/tags/My/"}]}]}