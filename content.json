{"meta":{"title":"BittenTail","subtitle":null,"description":null,"author":"BittenTail","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-09-04T08:26:11.000Z","updated":"2019-09-04T08:31:22.337Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-04T08:24:15.000Z","updated":"2019-09-04T08:31:36.919Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-09-06T01:42:40.000Z","updated":"2019-09-06T01:44:32.239Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"数据库查询语句-select","slug":"数据库查询语句-select","date":"2019-11-11T07:50:15.000Z","updated":"2019-11-12T06:20:32.570Z","comments":true,"path":"2019/11/11/数据库查询语句-select/","link":"","permalink":"http://yoursite.com/2019/11/11/数据库查询语句-select/","excerpt":"查询SELECT（select）","text":"查询SELECT（select） 1.为表起别名（建议不要起中文）select * from 表名 as 别名 --》as可以省略 select 表名.列名1 列名2 from 表名2.查询全部列（*），制定列（列名），为列起别名as3.查询前n部分数据： top n 列名：表示查看前n行 select top 1 * from 表名 --》查询第一行 top n percent 列名：表示查看前百分之n的数据 selsct top 2 percent * from 表名 --》查询前2%的行4.排序：order by 列名1 asc|desc，列名1 asc|desc、、、(asc-升序|desc-降序)selsct top 2 percent * from 表名 order by 列名1 asc，列名2 desc --》先以列1按升序排，相同的再按列2按降序排 消除重复行：distinct select distinct 列名 from 表名 --》需要将列隔开，而不是利用*针对所有列 5.条件查询：写在where后面 对行进行筛选，返回bool类型的值 比较运算符：=，&gt;，&gt;=，&lt;，&lt;=，!=，&lt;&gt; select 列名 from 表名 where 列名=条件 between…and…：表示在一个连续的范围内 --取出编号从3-8的数据 select * from 表名 where 列名 between 3 and 8 in：表示在一个非连续的范围内 --取出编号为1或3的数据 select * from 表名 where 列名 in（1,3） 逻辑运算符：and，or，not 模糊查询：用于处理字符串类型的值，运算符包括（类似于正则表达式）：“like”(关键字) “%”(表示0到多个字符) “_” （表示一个字符）“[]”（表示从一个范围内选一个字符） “^”。 “%”与“_”写在“[]”中表示本身的含义在“[]”表示一个连续的范围可以使用“-”“^”写在“[]”内部的开头，表示不使用内部的任何字符。 --姓名为张的数据 select * from 表名 where name like &apos;张%&apos; null的判断：使用is null或is not null --列1为null的数据 select * from 表名 where 列1 is （not） null 优先级：小括号&gt;not&gt;比较运算符&gt;逻辑运算符 6.连接：join 表名 on 关联条件（连接查询：当需要的结果从多张表中取时） 左表 …join 右表 内连接：innew join，两表中完全匹配的数据。 select * from 表1 as 别名1 ` inner join 表2 as 别名2 on 别名1.列1=别名2.列1 左外连接：left outer join，两表中完全匹配的数据，左表中特有的数据。 右外连接：right outer join，两表中完全匹配的数据，右表中特有的数据。 完全外连接：full outer join，两表中完全匹配的数据，左表中特有的数据，右表中特有的数据。 -关键问题：哪些表，关系 7.聚合函数：对数据进行合并。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"},{"name":"查询","slug":"查询","permalink":"http://yoursite.com/tags/查询/"}]},{"title":"数据库脚本操作","slug":"数据库脚本操作","date":"2019-11-08T08:48:36.000Z","updated":"2019-11-12T06:02:11.897Z","comments":true,"path":"2019/11/08/数据库脚本操作/","link":"","permalink":"http://yoursite.com/2019/11/08/数据库脚本操作/","excerpt":"脚本操作","text":"脚本操作 不区分大小写，字符串使用单引号，末尾不需要加分号 按照功能分类 DDL：数据定义语言，用于进行各种数据库对象的创建，主要操作包括create（创建）、alter（修改）、drop（删除）。 DML：数据管理语言，用于对表数据的添加、修改、删除、查询，主键操作包括insert（插入）、update（修改）、delete(删除）、select（查询）。 DCL：数据控制语言，用于进行权限分配等。 注释：–单行注释，/**/多行注释 数据库：创建、删除 可以通过查看master数据库中的sysdatabases表，来了解当前存在的数据库。 创建数据库create database 数据库名 on primary ( name=&apos;stuDB_data&apos;,--主数据文件的逻辑名称 filename=&apos;D:\\stuDB_data.mdf&apos;,--主数据文件的物理名称 size=5mb,--主数据文件的初始大小 maxsize=100mb,--主数据文件增长的最大值 filegrowth=15%--主数据文件的增长率 ) log on ( name=&apos;stuDB_log&apos;, filename=&apos;D:\\stuDB_log.ldf;, size=2mb, filegrowth=1mb )创建表use 数据库名 create table 表名 ( 列名 int not null primary key identity(1,1), 列名 nvarchar(10) )","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"脚本语法","slug":"脚本语法","permalink":"http://yoursite.com/tags/脚本语法/"}]},{"title":"数据库语句学习","slug":"数据库语句学习","date":"2019-11-07T07:34:52.000Z","updated":"2019-11-12T06:02:28.280Z","comments":true,"path":"2019/11/07/数据库语句学习/","link":"","permalink":"http://yoursite.com/2019/11/07/数据库语句学习/","excerpt":"SQL基本命令","text":"SQL基本命令 SELECT(select)：查看数据库中的数据。 UPDATA（updata）：更新数据库中的数据。 DELETE（delect）：从数据库中删除数据。 INSERT INTO(insert into)：向数据库中插入新数据。 CREATE DATABASE(create database）：创建新数据库。 ALTER DATABASE(alter database）：修改数据库。 CREATE TABLE(create Table）：创建新表。 ALTER TABLE(alter Table）：变更数据库表。 DROP TABLE(drop table）：删除表。 CREATE INDEX(create index）：创建索引（搜索键）。 DROP INDEX(drop index）：删除索引。 示例数据库student表： id name score 1 张三 60 2 李四 60 3 王五 61 4 小六 62 1.SELECT（select）语句：显示某几列的数据： SELECT column_name,column_name FROM table_name; SELECT name,score FROM student;以及显示表中的全部列的数据： SELECT * FROM table_name; SELECT * FROM student;SELECT DISTINCT:返回唯一不同的值（所有有重复的项只会返回一个值）。 SELECT DISTINCT column_name，column_name FROM table_name； SELECT DISTINCT score FROM student;2.WHERE(where）语句：用于提取（筛选）那些满足指定条件的记录。 SELECT column_name,column_name FROM table_name WHERE column_name operator value;利用WHERE语句从student表中选取姓名为张三的所有学生： SELECT * FROM Websites WHERE name=&apos;张三&apos;;WHERE语句中的运算符： 运算符 描述 = 等于 &lt;&gt; 不等于。注释：在SQL的一些版本中，该操作符可被写成！= &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 is null 空值判断 BETWEEN 在某个范围内 LIKE 搜索某种模式（正则表达式） IN 指定针对某个列的多个可能值 PS:文本字段&amp;数值字段：SQL使用单引号来环绕文本值（大部分数据库系统也接收双引号），上述代码中使用了单引号。如果是数值字段，则不用使用引号。###","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"}]},{"title":"Linux-链接","slug":"Linux-链接","date":"2019-10-24T03:05:59.000Z","updated":"2019-11-12T06:04:24.376Z","comments":true,"path":"2019/10/24/Linux-链接/","link":"","permalink":"http://yoursite.com/2019/10/24/Linux-链接/","excerpt":"Linux链接","text":"Linux链接 在Linux中链接分为两种，一种为硬链接（Hard Link），另外一种为软链接（Symbolic Link）或称为符号链接。默认情况下，ln命令产生硬链接。 硬链接：硬链接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号（Inode Index），它存储着文件重要参数信息，也就是元数据（metadata），比如创建时间、修改时间、文件大小、属主、归属的用户组（属组）、读写权数据所在block号等。在Linux中，多个文件名指向同一索引节点是存在的。比如：A是B的硬链接（A和B均为文件名），则A的目录项中的inode节点号与B的目录项中的inode节点号相同，即一个inode节点对应两个不同的文件名，两个文件名指向同一个文件，A和B对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个。硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个链接并不影响索引节点本身和其他的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。 软链接：软链接（符号链接），类似于windows系统中的快捷方式。它实际上是一种特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A是B的软链接（A和B都是文件名），A的目录项中的inode节点号与B的目录项中的inode节点号不相同，A和B指向的是两个不同的inode，继而指向两块不同的数据块。但是A的数据块中存放的只是B的路径名（可以根据这个找到B的目录项）。A和B之间是“主从”关系，如果B被删除了，A任然存在（因为两个是不同的文件），但指向的是一个无效的链接。 两者的特点软链接： 1.软链接是存放另一个文件的路径的形式存在。 2.软链接可以跨文件系统，硬链接不行。 3.软链接可以对一个不存在的文件名进行链接，硬链接必须要有源文件。 4.软链接可以对目录进行链接。 硬链接： 1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接。 3.硬链接只有在同一个文件系统中才能创建。 4.删除一个硬链接文件并不影响其他有相同inode号的文件。 不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁盘空间。 Linux系统可以用ln命令来创建链接文件。 ln命令格式：ln [参数] [源文件或目录] [目标文件或目录] 主要参数： -i交互模式，文件存在则提示用户是否覆盖。 -s软链接（符号链接） -d允许超级用户制作目录的硬链接 -b删除，覆盖以前建立的链接 软链接（符号链接）：ln -s source target 硬链接（实体链接）：ln source target songguojun:https://www.cnblogs.com/songgj/p/9115954.html PS：","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"链接","slug":"链接","permalink":"http://yoursite.com/tags/链接/"}]},{"title":"Redis初学","slug":"Redis初学","date":"2019-10-22T02:22:10.000Z","updated":"2019-11-12T06:03:28.912Z","comments":true,"path":"2019/10/22/Redis初学/","link":"","permalink":"http://yoursite.com/2019/10/22/Redis初学/","excerpt":"简介：","text":"简介： Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库 特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式。 Redis数据类型：redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）以及zset（sorted set：有序集合）。 1.String（字符串） String类型是二进制安全的。即Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。 string类型的值最大能存储512MB。2.Hash（哈希） Redis hash是一个键值（key=&gt;value）对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 每个hash可以存储26 PS： Redis配置文件：位于Redis安装目录下，文件名为rredis.conf（windows名为redis.windows.conf）。可以通过CONFIG命令查看或设置配置项。 守护进程（Daemon Process），即Daemon进程（精灵进程），是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在Linux中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依赖于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。·","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"}]},{"title":"归并排序","slug":"归并排序","date":"2019-09-07T11:48:38.000Z","updated":"2019-11-12T06:03:01.248Z","comments":true,"path":"2019/09/07/归并排序/","link":"","permalink":"http://yoursite.com/2019/09/07/归并排序/","excerpt":"介绍：","text":"介绍： 描述：算法图解： 代码实现：12","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"插入排序","slug":"插入排序","date":"2019-09-06T14:05:55.000Z","updated":"2019-11-12T06:03:17.865Z","comments":true,"path":"2019/09/06/插入排序/","link":"","permalink":"http://yoursite.com/2019/09/06/插入排序/","excerpt":"介绍：","text":"介绍： 插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。 描述：插入算法的工作方式如同人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入到左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，并进行插入。拿在手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。 算法图解： 代码实现：12345678910111213public int [] insertSort(int [] nums) &#123; int key=0,j; for(int i=1;i&lt;nums.length;i++) &#123; key = nums[i]; j = i-1; while(j &gt;= 0 &amp;&amp; nums[j] &gt; key) &#123;//当j到达第一个数时，或者插入值找到位置时退出循环 nums[j+1] = nums[j]; j = j-1; &#125; nums[j+1] = key; &#125; return nums; &#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-09-06T01:05:53.000Z","updated":"2019-09-06T01:47:22.096Z","comments":true,"path":"2019/09/06/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2019/09/06/我的第一篇博客/","excerpt":"","text":"","categories":[],"tags":[{"name":"My","slug":"My","permalink":"http://yoursite.com/tags/My/"}]}]}