<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>BittenTail</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-09T14:02:31.170Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BittenTail</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树的创建与遍历</title>
    <link href="http://yoursite.com/2019/12/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/12/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/</id>
    <published>2019-12-09T13:31:03.000Z</published>
    <updated>2019-12-09T14:02:31.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的结构定义"><a href="#二叉树的结构定义" class="headerlink" title="二叉树的结构定义"></a>二叉树的结构定义</h2><ul><li>使用Java进行二叉树的建立与遍历</li></ul><hr><pre><code>class TreeNode{    int val;    TreeNode left;    TreeNode right;    TreeNode(int x){val = x;}}</code></pre><a id="more"></a><h2 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h2><ul><li>利用栈进行先序创建二叉树  </li></ul><hr><pre><code>//利用栈先序创建二叉树TreeNode creatTree(List&lt;Integer&gt; nums) {    Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();    TreeNode root = null;    TreeNode parent = null;    boolean lIsNull = false;    TreeNode p = null;    for(Integer i:nums) {        //判断是否已经创建完根节点        if(root == null) {            p = new TreeNode(i);            root = p;            parent = p;            stack.push(p);        }else if(i != null) { //输入的节点为null            p = new TreeNode(i);            if(lIsNull) { //创建完左孩子，且为null                parent.right = p;                parent = p;                lIsNull = false;            }else {//未创建左孩子                parent.left = p;                parent = p;            }            stack.push(p);        }else {            if(lIsNull) {//左孩子为空，且右孩子也为空                if(stack.isEmpty()) {//如果栈为空，便是最后一个节点                    return root;                }else {// 返回为为空节点的双亲的双亲                    parent = stack.pop();                }            }else {//节点为空，令左孩子为null，返回为其双亲，                //且使标记lIsNull为true，表示左孩子为空                parent = stack.pop();                lIsNull = true;            }        }    }    return root;}</code></pre><h2 id="先序遍历二叉树"><a href="#先序遍历二叉树" class="headerlink" title="先序遍历二叉树"></a>先序遍历二叉树</h2><ul><li>使用递归</li></ul><hr><pre><code>/* * 二叉树的先序遍历 *///使用递归先序遍历二叉树public void preOrderTraverse1(TreeNode root) {    if(root != null) {        System.out.print(root.val);        preOrderTraverse1(root.left);        preOrderTraverse1(root.right);    }}</code></pre><ul><li>使用栈</li></ul><hr><pre><code>//使用栈先序遍历二叉树public void preOrderTraverse2(TreeNode root) {    Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();    TreeNode p = root;    while(p != null || !stack.isEmpty()) {        if(p != null) {            System.out.print(p.val);            stack.push(p);            p = p.left;        }else {            p = stack.pop();            p = p.right;        }    }}</code></pre><h2 id="中序遍历二叉树"><a href="#中序遍历二叉树" class="headerlink" title="中序遍历二叉树"></a>中序遍历二叉树</h2><ul><li>使用递归</li></ul><hr><pre><code>/* * 二叉树的中序遍历 *///使用递归进行中序遍历二叉树public void inOrderTraverse1(TreeNode root) {    if(root != null) {        inOrderTraverse1(root.left);        System.out.print(root.val);        inOrderTraverse1(root.right);    }}</code></pre><ul><li>使用栈</li></ul><hr><pre><code>//使用栈进行中序遍历二叉树public void inOrderTraverse2(TreeNode root) {    Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();    while(root != null || !stack.isEmpty()) {        if(root != null) {            stack.push(root);            root = root.left;        }else {            root = stack.pop();            System.out.print(root.val);            root = root.right;        }    }}</code></pre><h2 id="中序遍历二叉树-1"><a href="#中序遍历二叉树-1" class="headerlink" title="中序遍历二叉树"></a>中序遍历二叉树</h2><ul><li>使用递归</li></ul><hr><pre><code>/* * 二叉树的后序遍历 *///使用递归进行后序遍历二叉树public void postOrderTraverse1(TreeNode root) {    if(root != null) {        postOrderTraverse1(root.left);        postOrderTraverse1(root.right);        System.out.print(root.val);    }}</code></pre><ul><li>使用栈</li></ul><hr><pre><code>//使用栈进行后序遍历二叉树public void postOrderTraverse2(TreeNode root) {    Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();    while(root != null || !stack.isEmpty()) {        if(root != null) {            //使每个节点入栈两个，从而达到后序输出根节点            stack.push(root);            stack.push(root);            root = root.left;        }else {            root = stack.pop();            //根据栈顶元素判断是遍历弹栈还是输出根节点弹栈            if(!stack.isEmpty() &amp;&amp; root.val == stack.peek().val){                root = root.right;            }else {                System.out.print(root.val);                root = null;            }        }    }}</code></pre><h2 id="层次（广度）遍历"><a href="#层次（广度）遍历" class="headerlink" title="层次（广度）遍历"></a>层次（广度）遍历</h2><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><pre><code>public class Solution {public static void main(String[] args) {    List&lt;Integer&gt; nums = Arrays.asList(1,2,null,3,null,null,4,null,5,null,null);    TreeNode root = new TreeNode(-1);    root = root.creatTree(nums);    //先序遍历    root.preOrderTraverse1(root);    System.out.println();    root.preOrderTraverse2(root);    System.out.println();    //中序遍历    root.inOrderTraverse1(root);    System.out.println();    root.inOrderTraverse2(root);    System.out.println();    //后序遍历    root.postOrderTraverse1(root);    System.out.println();    root.postOrderTraverse2(root);}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树的结构定义&quot;&gt;&lt;a href=&quot;#二叉树的结构定义&quot; class=&quot;headerlink&quot; title=&quot;二叉树的结构定义&quot;&gt;&lt;/a&gt;二叉树的结构定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用Java进行二叉树的建立与遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x){val = x;}
}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼编码</title>
    <link href="http://yoursite.com/2019/11/23/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/23/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</id>
    <published>2019-11-23T01:24:47.000Z</published>
    <updated>2019-12-09T13:35:38.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h1><p>哈夫曼编码可以很有效地压缩数据：通常可以节省20%~90%的空间，具体压缩率依赖于数据的特性。</p><a id="more"></a><h2 id="哈夫曼编码-1"><a href="#哈夫曼编码-1" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><ul><li>假定我们希望压缩一个十万个字符的数据文件，下表给出了文件中所出现的字符和他们所出现的频率。</li><li><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr></thead><tbody><tr><td>频率（千次）</td><td>45</td><td>13</td><td>12</td><td>16</td><td>9</td><td>5</td></tr><tr><td>定长编码</td><td>000</td><td>001</td><td>010</td><td>011</td><td>100</td><td>101</td></tr><tr><td>变长编码</td><td>0</td><td>101</td><td>100</td><td>111</td><td>1101</td><td>1100</td></tr></tbody></table></li><li>采用一种二进制字符编码，每个字符用一个唯一的二进制串表示，称为码字。<ul><li>定长编码：需要用3位来表示6个字符，如上表定长编码所示，这种方式需要300000个二进制位来编码文件。</li><li>变长编码（variable-length code）：可以达到比定长编码好得多的压缩率，其思想是赋予高频字符短码字，赋予低频字符长码字。如上表变长编码所示。，这种编码表示共需224000位，比定长编码节约了25%的空间。   </li></ul></li></ul><p><strong>前缀码(prefix code）：</strong>即没有任何码字是其他码字的前缀。<br>前缀码的作用是简化解码过程。由于没有码字是其他码字的前缀，编码文件的开始码字是无歧义的。我们可以简单的识别出开始码字，将其转换回原字符，然后对编码文件剩余部分重复这种解码过程。</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p>前缀码的一种方便的表示形式，可以容易地截取开始码字。<br>一种二叉树，其叶节点为给定的字符。字符的二进制码字用从根节点到该字符叶节点的简单路径表示，其中0意味着“转向左孩子”，1意味着“转向右孩子”。<br>注意：编码树并不是二叉搜索树，因为叶节点并未有序排列，而内部节点并不包含字符关键字。<br><code>mermaidgraph TB　　client--&gt;|2 findConfigServices|LoadBalancer;　　LoadBalancer--&gt;|3 findService|metaServer;　　metaServer--&gt;Eureka;　　client--&gt;|4 access via ip:port/client load balance/error retry|ConfigService;　　ConfigService--&gt;|1 register/cancel|Eureka;　　ConfigService--&gt;|read/write|ConfigDB;</code>​</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;哈夫曼编码&quot;&gt;&lt;a href=&quot;#哈夫曼编码&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼编码&quot;&gt;&lt;/a&gt;哈夫曼编码&lt;/h1&gt;&lt;p&gt;哈夫曼编码可以很有效地压缩数据：通常可以节省20%~90%的空间，具体压缩率依赖于数据的特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈夫曼编码" scheme="http://yoursite.com/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java杂记</title>
    <link href="http://yoursite.com/2019/11/17/Java%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/17/Java%E6%9D%82%E8%AE%B0/</id>
    <published>2019-11-17T11:23:19.000Z</published>
    <updated>2019-12-09T13:36:17.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="指数记数法"><a href="#指数记数法" class="headerlink" title="指数记数法"></a>指数记数法</h2><ul><li>1.39E-43：其中e并不代表自然对数的基数（约等于2.718），而是“10的幂次”。<a id="more"></a><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2></li><li>移位操作符的运算对象是二进制的“位”。  </li><li>移位操作符只可用来处理整数类型（基本类型的一种）。</li><li>左移位操作符（&lt;&lt;）：能按照操作符右侧指定的位数将操作符左边的操作数向左移动（在低位补0）  </li><li>有符号”右移位操作符（&gt;&gt;）：按照操作符右侧指定的位数将操作符左边的操作数向右移动。<br>“有符号”右移位操作符使用“符号扩展”：若符号为正，则在高位插入0；若符号为负，则在高位插入1。</li><li>Java中增加了一种“无符号”右移位操作符（&gt;&gt;&gt;），它使用“零扩展”：无论正负，都在高位插入0。这一操作符在C或C++中是没有的。</li><li>如果对char、byte或者short类型的数值进行移位处理，那么在移位进行之前，他们会被转换为int类型，并且得到的结果也是一个int类型的值。<br>只有数值右端的低5位才有用，这样可防止我们移位超过int型值所具有d额位数。（译注：因为2的5次方为32，而int型值只有32位）<br>若对一个long类型的数值进行处理，最后得到的结果也是long。此时只会用到数值右端的低6位，以防止移位超过long型数值具有的位数。</li><li>“移位”可与“等号”（&lt;&lt;=或&gt;&gt;=或&gt;&gt;&gt;=）组合使用。注意：如果对byte或short值进行这样的移位运算，得到的可能不是正确的结果，他们会先被转换成int类型，再进行右移操作，然后被截断，赋值给原来的类型，在这种情况下可能得到-1的结果。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h1&gt;&lt;h2 id=&quot;指数记数法&quot;&gt;&lt;a href=&quot;#指数记数法&quot; class=&quot;headerlink&quot; title=&quot;指数记数法&quot;&gt;&lt;/a&gt;指数记数法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.39E-43：其中e并不代表自然对数的基数（约等于2.718），而是“10的幂次”。
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="操作符" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java Virtual Machine-自动内存管理机制（内存区域）</title>
    <link href="http://yoursite.com/2019/11/11/Java%20Virtual%20Machine-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%88%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/11/Java%20Virtual%20Machine-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%88%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%EF%BC%89/</id>
    <published>2019-11-11T07:50:15.000Z</published>
    <updated>2019-11-14T14:06:39.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>与C/C++不同，Java拥有虚拟机自动内存管理机制，不需要为<strong>new</strong>的每一个对象都去写向对应的<strong>delect/free</strong>，从而不容易出现内存泄露和内存溢出问题。不过，也因Java程序员将内存控制的权利交给了Java虚拟机，一旦出现内存泄露和溢出的问题，如果不了解虚拟机是如何使用内存的，那么将很难排查错误。</p><a id="more"></a><h1 id="Java运行时数据区"><a href="#Java运行时数据区" class="headerlink" title="Java运行时数据区"></a>Java运行时数据区</h1><table><thead><tr><th>由线程共享的数据区</th><th>线程隔离的数据区</th></tr></thead><tbody><tr><td>方法区（Method Area)</td><td>虚拟机栈（VM Stack）</td></tr><tr><td>堆（Heap）</td><td>本地方法栈（Native Method Stack）</td></tr><tr><td></td><td>程序计数器（Program Counter Register）</td></tr></tbody></table><h2 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h2><p><strong><em>线程私有的</em></strong>  </p><ul><li>定义：程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。</li><li>作用：由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，因此在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。所以为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，且各线程之间计数器互不影响，独立存储，我们称这片内存区域为“线程私有”的内存。</li><li>线程计数器：<br>线程正在执行一个Java方法—-》计数器记录的是正在执行的虚拟机字节码指令的地址。<br>线程正在执行一个Native方法–》计数器值为空（Undefined）  </li></ul><p><strong>注</strong>：此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h2 id="Java虚拟机栈（Java-Virtual-Machine-Stack）"><a href="#Java虚拟机栈（Java-Virtual-Machine-Stack）" class="headerlink" title="Java虚拟机栈（Java Virtual Machine Stack）"></a>Java虚拟机栈（Java Virtual Machine Stack）</h2><p><strong><em>线程私有的</em></strong> </p><ul><li>生命周期与线程相同。</li><li>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链、方法出口等信息。<br>每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li><li>局部变量表：存放了编译期可知的各种基本数据类型（boolean、byte、short、int、long、float、double、char）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。<br>其中64位长度的long和double类型的数据会占用两个局部变量空间（Slot），其余的数据类型只占用一个。</li><li>局部变量表所需的内存空间在编译期间完成分配，在方法运行期间不会改变局部变量表的大小。<br>PS：栈帧：是方法运行时的基础数据结构。  </li></ul><p><strong>注</strong>：会抛出StackOverflowError异常，如果扩展时无法申请到足够的内存，就会抛出会抛出OutOfMemoryError异常。</p><h2 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h2><p><strong><em>线程私有的</em></strong><br>本地方法栈所发挥的作用与虚拟机栈的作用非常相似。<br>两者之间的区别：  </p><ul><li>虚拟机栈：为虚拟机执行Java方法（也就是字节码）服务</li><li>本地方法栈：为虚拟机使用到的Native方法服务<br>虚拟机规范中并未对本地方法栈中方法使用的语言、使用方式与数据结构进行强制规定，因此具体的虚拟机可以自由实现它。  </li><li>如Sun HotSpot虚拟机直接将本地方法栈与虚拟机栈合二为一。  </li></ul><p><strong>注</strong>：与虚拟机栈一样，也会抛出StackOverflowError异常和OutOfMemoryError异常。</p><h2 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h2><p><strong><em>线程共享的</em></strong> </p><ul><li>是Java虚拟机所管理的内存中最大的一块，在虚拟机启动时创建。</li><li>唯一的目的就是存放对象实例，几乎所有的对象实例都在这里分配。<br>Java虚拟机规范中的描述：The heap is the runtime data area from which memory for all class instances and arrays is allocated.(所有的对象实例及数组都要在对上分配。）<br>不过随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</li><li>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称作“GC堆”。</li><li>Java堆根据收集器所使用的的分代收集算法，还可进行分类，如新生代、老生代等。</li><li>Java堆可以处于物理上不连续的内存空间，只要逻辑上是连续的即可。  </li></ul><p><strong>注</strong>：如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h2 id="方法区（Method-Area"><a href="#方法区（Method-Area" class="headerlink" title="方法区（Method Area)"></a>方法区（Method Area)</h2><p><strong><em>线程共享的</em></strong>  </p><ul><li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li><li>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</li><li>垃圾收集较少，内存回收目标主要是针对常量池的回收和对类型的卸载。  </li><li><strong>注</strong>：当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。<h2 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h2></li></ul><p><strong><em>方法区的一部分</em></strong>  </p><ul><li>Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</li><li>具备动态性，运行期间也可能将新的常量放入池中，如String类的intern（）方法。  </li></ul><p><strong>注</strong>：当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h2 id="直接内存（Direct-Memory）"><a href="#直接内存（Direct-Memory）" class="headerlink" title="直接内存（Direct Memory）"></a>直接内存（Direct Memory）</h2><p><strong><em>并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域</em></strong>  </p><ul><li>这部分内存也被频繁使用，并且也可能导致OutOfMemoryError异常。</li><li>不会受到Java堆大小的限制。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;与C/C++不同，Java拥有虚拟机自动内存管理机制，不需要为&lt;strong&gt;new&lt;/strong&gt;的每一个对象都去写向对应的&lt;strong&gt;delect/free&lt;/strong&gt;，从而不容易出现内存泄露和内存溢出问题。不过，也因Java程序员将内存控制的权利交给了Java虚拟机，一旦出现内存泄露和溢出的问题，如果不了解虚拟机是如何使用内存的，那么将很难排查错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="内存" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>数据库查询语句-select</title>
    <link href="http://yoursite.com/2019/11/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5-select/"/>
    <id>http://yoursite.com/2019/11/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5-select/</id>
    <published>2019-11-11T07:50:15.000Z</published>
    <updated>2019-11-12T10:01:10.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查询SELECT（select）"><a href="#查询SELECT（select）" class="headerlink" title="查询SELECT（select）"></a>查询SELECT（select）</h3><a id="more"></a><h4 id="1-为表起别名（建议不要起中文）"><a href="#1-为表起别名（建议不要起中文）" class="headerlink" title="1.为表起别名（建议不要起中文）"></a>1.为表起别名（建议不要起中文）</h4><pre><code>select * from 表名 as 别名  --》as可以省略select 表名.列名1 列名2 from 表名</code></pre><h4 id="2-查询全部列（-），指定列（列名），为列起别名as"><a href="#2-查询全部列（-），指定列（列名），为列起别名as" class="headerlink" title="2.查询全部列（*），指定列（列名），为列起别名as"></a>2.查询全部列（*），指定列（列名），为列起别名as</h4><h4 id="3-查询前n部分数据："><a href="#3-查询前n部分数据：" class="headerlink" title="3.查询前n部分数据："></a>3.查询前n部分数据：</h4><ul><li><p>top n 列名：表示查看前n行</p><pre><code>select top 1 * from 表名  --》查询第一行</code></pre></li><li><p>top n percent 列名：表示查看前百分之n的数据</p><pre><code>selsct top 2 percent * from 表名  --》查询前2%的行</code></pre><h4 id="4-排序：order-by-列名1-asc-desc，列名1-asc-desc、、、-asc-升序-desc-降序"><a href="#4-排序：order-by-列名1-asc-desc，列名1-asc-desc、、、-asc-升序-desc-降序" class="headerlink" title="4.排序：order by 列名1 asc|desc，列名1 asc|desc、、、(asc-升序|desc-降序)"></a>4.排序：order by 列名1 asc|desc，列名1 asc|desc、、、(asc-升序|desc-降序)</h4><pre><code>selsct top 2 percent * from 表名order by 列名1 asc，列名2 desc  --》先以列1按升序排，相同的再按列2按降序排</code></pre></li><li><p>消除重复行：distinct</p><pre><code>select distinct 列名 from 表名  --》需要将列隔开，而不是利用*针对所有列</code></pre></li></ul><h4 id="5-条件查询：写在where后面"><a href="#5-条件查询：写在where后面" class="headerlink" title="5.条件查询：写在where后面"></a>5.条件查询：写在where后面</h4><ul><li><p>对行进行筛选，返回bool类型的值</p></li><li><p>比较运算符：=，&gt;，&gt;=，&lt;，&lt;=，!=，&lt;&gt;</p><pre><code>select 列名 from 表名 where 列名=条件</code></pre></li><li><p>between…and…：表示在一个连续的范围内</p><pre><code>--取出编号从3-8的数据select * from 表名 where 列名 between 3 and 8</code></pre></li><li><p>in：表示在一个非连续的范围内</p><pre><code>--取出编号为1或3的数据select * from 表名 where 列名 in（1,3）</code></pre></li><li><p>逻辑运算符：and，or，not</p></li><li><p>模糊查询：用于处理字符串类型的值，运算符包括（类似于正则表达式）：“like”(关键字) “%”(表示0到多个字符) “_” （表示一个字符）“[]”（表示从一个范围内选一个字符） “^”。<br> “%”与“_”写在“[]”中表示本身的含义<br>在“[]”表示一个连续的范围可以使用“-”<br>“^”写在“[]”内部的开头，表示不使用内部的任何字符。</p><pre><code>--姓名为张的数据select * from 表名 where name like &apos;张%&apos;</code></pre></li><li><p>null的判断：使用is null或is not null</p><pre><code>--列1为null的数据select * from 表名 where 列1 is （not） null</code></pre></li><li><p>优先级：小括号&gt;not&gt;比较运算符&gt;逻辑运算符</p><h4 id="6-连接：join-表名-on-关联条件（连接查询：当需要的结果从多张表中取时）"><a href="#6-连接：join-表名-on-关联条件（连接查询：当需要的结果从多张表中取时）" class="headerlink" title="6.连接：join 表名 on 关联条件（连接查询：当需要的结果从多张表中取时）"></a><strong>6.连接</strong>：join 表名 on 关联条件（连接查询：当需要的结果从多张表中取时）</h4></li></ul><p><em>左表 …join 右表</em></p><ul><li><p>内连接：innew join，两表中完全匹配的数据。  </p><pre><code>select * from 表1 as 别名1 ` inner join 表2 as 别名2 on 别名1.列1=别名2.列1</code></pre></li><li><p>左外连接：left outer join，两表中完全匹配的数据，左表中特有的数据。 </p></li><li><p>右外连接：right outer join，两表中完全匹配的数据，右表中特有的数据。</p></li><li><p>完全外连接：full outer join，两表中完全匹配的数据，左表中特有的数据，右表中特有的数据。  </p></li><li><p>-<em>关键问题</em>：哪些表行，关系</p><h4 id="7-聚合函数：对数据进行合并。"><a href="#7-聚合函数：对数据进行合并。" class="headerlink" title="7.聚合函数：对数据进行合并。"></a>7.聚合函数：对数据进行<strong>合并</strong>。</h4></li></ul><p><strong>sum</strong>（求和） <strong>avg</strong>（平均） <strong>count</strong>（计数) <strong>max</strong>（最大） <strong>min</strong>（最小）<br><em>一般是对数字类型的列进行操作<br>一条查询中可以同时写多个聚合函数，但是不能与普通列混写<br>聚合中的null问题：不参与计算</em>  </p><pre><code>select COUNT（*） as count from 表名（where 列名=条件）</code></pre><h4 id="8-开窗函数"><a href="#8-开窗函数" class="headerlink" title="8.开窗函数"></a>8.开窗函数</h4><p><strong>over（）</strong><br><em>将统计出来的数据分布到原表的每一行中<br>结合聚合函数、排名函数使用</em></p><pre><code>--将统计信息分布到每一行中去select * avg(列名） over（）from 表名</code></pre><h4 id="9-分组"><a href="#9-分组" class="headerlink" title="9.分组"></a>9.分组</h4><p>group by 列名1 列名2…<br><em>聚合函数一般结合分组使用，进行分组内的数据进行统计<br>根据指定列进行分组<br>分组后条件筛选：having…</em></p><pre><code>--统计男女生人数select 列名1 count（*）   --》只能显示分组那一列from 表名where 列名1=条件   --》where语句写在分组前group by 列名1  --》可以进行多级分组，只需在后面加“,列名2...”having count（*）&gt;条件  --》对分组之后的数据进行筛选</code></pre><h3 id="总结：完整的select语句及执行顺序"><a href="#总结：完整的select语句及执行顺序" class="headerlink" title="总结：完整的select语句及执行顺序"></a>总结：完整的select语句及执行顺序</h3><pre><code>select distinct top n *from 表名1 join 表名2 on...join..表名n..where ...group by...having...oder by...</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查询SELECT（select）&quot;&gt;&lt;a href=&quot;#查询SELECT（select）&quot; class=&quot;headerlink&quot; title=&quot;查询SELECT（select）&quot;&gt;&lt;/a&gt;查询SELECT（select）&lt;/h3&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="查询" scheme="http://yoursite.com/tags/%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据库脚本操作</title>
    <link href="http://yoursite.com/2019/11/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/11/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2019-11-08T08:48:36.000Z</published>
    <updated>2019-11-12T06:02:11.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="脚本操作"><a href="#脚本操作" class="headerlink" title="脚本操作"></a>脚本操作</h1><a id="more"></a><ul><li>不区分大小写，字符串使用单引号，末尾不需要加分号</li><li>按照功能分类<ul><li>DDL：数据定义语言，用于进行各种数据库对象的创建，主要操作包括create（创建）、alter（修改）、drop（删除）。</li><li><strong>DML</strong>：数据管理语言，用于对表数据的添加、修改、删除、查询，主键操作包括insert（插入）、update（修改）、delete(删除）、<strong>select</strong>（查询）。</li><li>DCL：数据控制语言，用于进行权限分配等。</li></ul></li><li>注释：–单行注释，/**/多行注释</li><li>数据库：创建、删除<ul><li>可以通过查看master数据库中的sysdatabases表，来了解当前存在的数据库。</li></ul></li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre><code>create database 数据库名on primary(    name=&apos;stuDB_data&apos;,--主数据文件的逻辑名称    filename=&apos;D:\stuDB_data.mdf&apos;,--主数据文件的物理名称    size=5mb,--主数据文件的初始大小    maxsize=100mb,--主数据文件增长的最大值    filegrowth=15%--主数据文件的增长率)    log on      (          name=&apos;stuDB_log&apos;,          filename=&apos;D:\stuDB_log.ldf;,          size=2mb,          filegrowth=1mb      )</code></pre><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><pre><code>use 数据库名create table 表名(    列名 int not null primary key identity(1,1),    列名 nvarchar(10))</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;脚本操作&quot;&gt;&lt;a href=&quot;#脚本操作&quot; class=&quot;headerlink&quot; title=&quot;脚本操作&quot;&gt;&lt;/a&gt;脚本操作&lt;/h1&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="脚本语法" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库语句学习</title>
    <link href="http://yoursite.com/2019/11/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/11/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-11-07T07:34:52.000Z</published>
    <updated>2019-11-12T06:02:28.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL基本命令"><a href="#SQL基本命令" class="headerlink" title="SQL基本命令"></a>SQL基本命令</h2><a id="more"></a><ul><li>SELECT(select)：查看数据库中的数据。</li><li>UPDATA（updata）：更新数据库中的数据。</li><li>DELETE（delect）：从数据库中删除数据。</li><li>INSERT INTO(insert into)：向数据库中插入新数据。</li><li>CREATE DATABASE(create database）：创建新数据库。</li><li>ALTER DATABASE(alter database）：修改数据库。</li><li>CREATE TABLE(create Table）：创建新表。</li><li>ALTER TABLE(alter Table）：变更数据库表。</li><li>DROP TABLE(drop table）：删除表。</li><li>CREATE INDEX(create index）：创建索引（搜索键）。</li><li>DROP INDEX(drop index）：删除索引。</li></ul><hr><h3 id="示例数据库student表："><a href="#示例数据库student表：" class="headerlink" title="示例数据库student表："></a>示例数据库student表：</h3><table><thead><tr><th>id</th><th>name</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>60</td></tr><tr><td>2</td><td>李四</td><td>60</td></tr><tr><td>3</td><td>王五</td><td>61</td></tr><tr><td>4</td><td>小六</td><td>62</td></tr></tbody></table><hr><h3 id="1-SELECT（select）语句："><a href="#1-SELECT（select）语句：" class="headerlink" title="1.SELECT（select）语句："></a>1.SELECT（select）语句：</h3><p>显示某几列的数据：</p><pre><code>SELECT column_name,column_name FROM table_name;SELECT name,score FROM student;</code></pre><p>以及显示表中的全部列的数据：</p><pre><code>SELECT * FROM table_name;SELECT * FROM student;</code></pre><p>SELECT DISTINCT:返回唯一不同的值（所有有重复的项只会返回一个值）。</p><pre><code>SELECT DISTINCT column_name，column_name FROM table_name；SELECT DISTINCT score FROM student;</code></pre><h3 id="2-WHERE-where）语句："><a href="#2-WHERE-where）语句：" class="headerlink" title="2.WHERE(where）语句："></a>2.WHERE(where）语句：</h3><p>用于提取（筛选）那些满足指定条件的记录。</p><pre><code>SELECT column_name,column_name FROM table_name WHERE column_name operator value;</code></pre><p>利用WHERE语句从student表中选取姓名为张三的所有学生：</p><pre><code>SELECT * FROM Websites WHERE name=&apos;张三&apos;;</code></pre><h4 id="WHERE语句中的运算符："><a href="#WHERE语句中的运算符：" class="headerlink" title="WHERE语句中的运算符："></a>WHERE语句中的运算符：</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于。<strong>注释</strong>：在SQL的一些版本中，该操作符可被写成！=</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>is null</td><td>空值判断</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式（正则表达式）</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr></tbody></table><ul><li>PS:文本字段&amp;数值字段：<br>SQL使用单引号来环绕文本值（大部分数据库系统也接收双引号），上述代码中使用了单引号。<br>如果是数值字段，则不用使用引号。<br>### </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL基本命令&quot;&gt;&lt;a href=&quot;#SQL基本命令&quot; class=&quot;headerlink&quot; title=&quot;SQL基本命令&quot;&gt;&lt;/a&gt;SQL基本命令&lt;/h2&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux-链接</title>
    <link href="http://yoursite.com/2019/10/24/Linux-%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/10/24/Linux-%E9%93%BE%E6%8E%A5/</id>
    <published>2019-10-24T03:05:59.000Z</published>
    <updated>2019-12-09T13:35:20.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h1><p>在Linux中链接分为两种，一种为硬链接（Hard Link），另外一种为软链接（Symbolic Link）或称为符号链接。默认情况下，ln命令产生硬链接。</p><a id="more"></a><hr><h2 id="硬链接："><a href="#硬链接：" class="headerlink" title="硬链接："></a>硬链接：</h2><p>硬链接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号（Inode Index），它存储着文件重要参数信息，也就是元数据（metadata），比如创建时间、修改时间、文件大小、属主、归属的用户组（属组）、读写权数据所在block号等。<br>在Linux中，多个文件名指向同一索引节点是存在的。比如：A是B的硬链接（A和B均为文件名），则A的目录项中的inode节点号与B的目录项中的inode节点号相同，即一个inode节点对应两个不同的文件名，两个文件名指向同一个文件，A和B对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个。<br>硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个链接并不影响索引节点本身和其他的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。</p><hr><h2 id="软链接："><a href="#软链接：" class="headerlink" title="软链接："></a>软链接：</h2><p>软链接（符号链接），类似于windows系统中的快捷方式。它实际上是一种特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A是B的软链接（A和B都是文件名），A的目录项中的inode节点号与B的目录项中的inode节点号不相同，A和B指向的是两个不同的inode，继而指向两块不同的数据块。但是A的数据块中存放的只是B的路径名（可以根据这个找到B的目录项）。A和B之间是“主从”关系，如果B被删除了，A任然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><hr><h2 id="两者的特点"><a href="#两者的特点" class="headerlink" title="两者的特点"></a>两者的特点</h2><h3 id="软链接：-1"><a href="#软链接：-1" class="headerlink" title="软链接："></a>软链接：</h3><ul><li>1.软链接是存放另一个文件的路径的形式存在。</li><li>2.软链接可以跨文件系统，硬链接不行。</li><li>3.软链接可以对一个不存在的文件名进行链接，硬链接必须要有源文件。</li><li>4.软链接可以对目录进行链接。</li></ul><h3 id="硬链接：-1"><a href="#硬链接：-1" class="headerlink" title="硬链接："></a>硬链接：</h3><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接。</li><li>3.硬链接只有在同一个文件系统中才能创建。</li><li>4.删除一个硬链接文件并不影响其他有相同inode号的文件。</li></ul><p><strong>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁盘空间。</strong></p><p>Linux系统可以用ln命令来创建链接文件。</p><h5 id="ln命令格式："><a href="#ln命令格式：" class="headerlink" title="ln命令格式："></a>ln命令格式：</h5><p><strong>ln [参数] [源文件或目录] [目标文件或目录]</strong>   </p><h6 id="主要参数："><a href="#主要参数：" class="headerlink" title="主要参数："></a>主要参数：</h6><ul><li>-i交互模式，文件存在则提示用户是否覆盖。</li><li>-s软链接（符号链接）</li><li>-d允许超级用户制作目录的硬链接</li><li>-b删除，覆盖以前建立的链接<ul><li>软链接（符号链接）：ln -s source target</li><li>硬链接（实体链接）：ln source target</li></ul></li></ul><hr><blockquote><p>songguojun:<a href="https://www.cnblogs.com/songgj/p/9115954.html" target="_blank" rel="noopener">https://www.cnblogs.com/songgj/p/9115954.html</a></p></blockquote><hr><h3 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux链接&quot;&gt;&lt;a href=&quot;#Linux链接&quot; class=&quot;headerlink&quot; title=&quot;Linux链接&quot;&gt;&lt;/a&gt;Linux链接&lt;/h1&gt;&lt;p&gt;在Linux中链接分为两种，一种为硬链接（Hard Link），另外一种为软链接（Symbolic Link）或称为符号链接。默认情况下，ln命令产生硬链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="链接" scheme="http://yoursite.com/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Redis初学</title>
    <link href="http://yoursite.com/2019/10/22/Redis%E5%88%9D%E5%AD%A6/"/>
    <id>http://yoursite.com/2019/10/22/Redis%E5%88%9D%E5%AD%A6/</id>
    <published>2019-10-22T02:22:10.000Z</published>
    <updated>2019-11-12T06:03:28.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><a id="more"></a><p>Redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式。</li></ul><hr><h3 id="Redis数据类型："><a href="#Redis数据类型：" class="headerlink" title="Redis数据类型："></a>Redis数据类型：</h3><p>redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）以及zset（sorted set：有序集合）。</p><h4 id="1-String（字符串）"><a href="#1-String（字符串）" class="headerlink" title="1.String（字符串）"></a>1.String（字符串）</h4><ul><li>String类型是二进制安全的。即Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</li><li>string类型的值最大能存储512MB。<h4 id="2-Hash（哈希）"><a href="#2-Hash（哈希）" class="headerlink" title="2.Hash（哈希）"></a>2.Hash（哈希）</h4></li><li>Redis hash是一个键值（key=&gt;value）对集合。</li><li>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</li><li>每个hash可以存储26</li></ul><hr><h2 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h2><ul><li>Redis配置文件：位于Redis安装目录下，文件名为rredis.conf（windows名为redis.windows.conf）。可以通过CONFIG命令查看或设置配置项。</li><li>守护进程（Daemon Process），即Daemon进程（精灵进程），是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。<br>守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在Linux中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依赖于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。·</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://yoursite.com/2019/09/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/09/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2019-09-07T11:48:38.000Z</published>
    <updated>2019-11-12T06:03:01.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><a id="more"></a><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><h2 id="算法图解："><a href="#算法图解：" class="headerlink" title="算法图解："></a>算法图解：</h2><p><img src="/images/Blog/MergeSort/1.png" alt="avatar"></p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍：&quot;&gt;&lt;a href=&quot;#介绍：&quot; class=&quot;headerlink&quot; title=&quot;介绍：&quot;&gt;&lt;/a&gt;介绍：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://yoursite.com/2019/09/06/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/09/06/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2019-09-06T14:05:55.000Z</published>
    <updated>2019-11-12T06:03:17.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><a id="more"></a><p>插入排序是将n个数的一个序列&lt;a1,a2,a3,…,an&gt;,经过插入排序算法将这n个数按序排列，输出满足a1&lt;a2&lt;a3&lt;…&lt;an。</p><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>插入算法的工作方式如同人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入到左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，并进行插入。拿在手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。</p><h2 id="算法图解："><a href="#算法图解：" class="headerlink" title="算法图解："></a>算法图解：</h2><p><img src="/images/Blog/InsertionSort/1.png" alt="avatar"></p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int [] insertSort(int [] nums) &#123;</span><br><span class="line">int key=0,j;</span><br><span class="line">for(int i=1;i&lt;nums.length;i++) &#123;</span><br><span class="line">key = nums[i];</span><br><span class="line">j = i-1;</span><br><span class="line">while(j &gt;= 0 &amp;&amp; nums[j] &gt; key) &#123;//当j到达第一个数时，或者插入值找到位置时退出循环</span><br><span class="line">nums[j+1] = nums[j];</span><br><span class="line">j = j-1;</span><br><span class="line">&#125;</span><br><span class="line">nums[j+1] = key;</span><br><span class="line">&#125;</span><br><span class="line">return nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍：&quot;&gt;&lt;a href=&quot;#介绍：&quot; class=&quot;headerlink&quot; title=&quot;介绍：&quot;&gt;&lt;/a&gt;介绍：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/09/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/09/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-09-06T01:05:53.000Z</published>
    <updated>2019-09-06T01:47:22.096Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="My" scheme="http://yoursite.com/tags/My/"/>
    
  </entry>
  
</feed>
